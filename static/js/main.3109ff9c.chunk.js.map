{"version":3,"sources":["components/home.js","components/contacts.js","components/chats.js","components/main.js","App.js","serviceWorker.js","index.js","btwglogo.png"],"names":["Home","props","state","activeTab","this","className","style","width","margin","col","src","Logo","alt","active","onChange","tabId","setState","ripple","toggleCategories","Component","Contacts","icon","href","name","Chats","Main","exact","path","component","App","title","scroll","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.3109ff9c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Cell, Button, Card, CardTitle, CardText, CardActions, Tabs, Tab } from 'react-mdl'\r\nimport Logo from '../btwglogo.png';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {activeTab: 0 };\r\n    }\r\n\r\n    toggleCategories() {\r\n\r\n        if(this.state.activeTab === 0) {\r\n\r\n            return(\r\n            \r\n        <div>\r\n            <div className=\"tabs-heading\">\r\n                <center><h1>Make a Call</h1></center>\r\n            </div>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                       \r\n            </div>\r\n        </div>\r\n\r\n            );\r\n\r\n        } else if(this.state.activeTab === 1) {\r\n\r\n            return(\r\n\r\n                <div>\r\n                    <div className=\"tabs-heading\">\r\n                        <center><h1>Send a Text</h1></center>\r\n                    </div>\r\n                    <div style={{width: '100%', margin: 'auto'}}>\r\n                \r\n                    </div>\r\n                </div>\r\n\r\n\r\n            );\r\n\r\n        } else if(this.state.activeTab === 2) {\r\n\r\n            return(\r\n            <div>\r\n                <div className=\"tabs-heading\">\r\n                <center><h1>See Open Chats</h1></center>\r\n                    </div>\r\n                <div style={{width: '100%', margin: 'auto'}}>\r\n                \r\n                </div>\r\n            </div>\r\n\r\n            );\r\n        }\r\n    }\r\n\r\n\r\nrender() {\r\n\r\n    return(\r\n    <div>\r\n        <div style ={{width: '100%', margin: 'auto'}}> \r\n        <Grid className=\"landing-grid\">\r\n            <Cell col={12}>\r\n                <center><img src={Logo} alt=\"logo\" className=\"logo\" /></center>\r\n                   \r\n            <div className=\"banner-text\">\r\n\r\n                <center><h1>Send a Phone Call or Text Message to Anyone From Anywhere.</h1></center>\r\n\r\n\r\n            </div>\r\n            </Cell>\r\n        </Grid>\r\n        <div className=\"project-tabs\"> \r\n                <Tabs activeTab={this.state.active} onChange={(tabId) => this.setState({activeTab: tabId})} ripple>\r\n                    <Tab>Make a Call</Tab>\r\n                    <Tab>Send a Text</Tab>\r\n                    <Tab>See Open Chats</Tab>\r\n                </Tabs>\r\n            <section className=\"tabs-content\">{this.toggleCategories()}</section>\r\n            \r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n    );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Grid, Cell, Button, Card, CardTitle, CardText, CardActions, Tabs, Tab, List, ListItem, ListItemContent, ListItemAction, Icon } from 'react-mdl'\r\n\r\n\r\n\r\nclass Contacts extends Component {\r\n\r\n\r\nrender() {\r\n\r\n    return(\r\n\r\n        <div style ={{width: '100%', margin: 'auto'}}>\r\n            <Grid>\r\n                <Cell col={2}>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemContent icon=\"person\">Brian Evans</ListItemContent>\r\n                    <ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"phone\" /></a>\r\n                    </ListItemAction>\r\n                    <ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"message\" /></a>\r\n                    </ListItemAction>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemContent icon=\"person\">Shane Shuford</ListItemContent>\r\n                    <ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"phone\" /></a>\r\n                    </ListItemAction>\r\n                    <ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"message\" /></a>\r\n                    </ListItemAction>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemContent icon=\"person\">Chris Blair</ListItemContent>\r\n                    <ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"phone\" /></a>\r\n                    </ListItemAction>\r\n                    <ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"message\" /></a>\r\n                    </ListItemAction>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemContent icon=\"person\">Kellie Shuford</ListItemContent>\r\n                    <ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"phone\" /></a>\r\n                    </ListItemAction><ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"message\" /></a>\r\n                    </ListItemAction>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemContent icon=\"person\">Emily Stringer</ListItemContent>\r\n                    <ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"phone\" /></a>\r\n                    </ListItemAction><ListItemAction>\r\n                        <a href=\"#\"><Icon name=\"message\" /></a>\r\n                    </ListItemAction>\r\n                </ListItem>\r\n            </List>\r\n             </Cell>\r\n            </Grid>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Contacts;","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Chats extends Component {\r\n\r\n\r\nrender() {\r\n\r\n    return(\r\n\r\n        <div>This is the chats page</div>\r\n\r\n    );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Chats;","import React from 'react';\r\nimport { Switch, Route} from 'react-router-dom';\r\n\r\nimport Home from './home';\r\nimport Contacts from './contacts';\r\nimport Chats from './chats';\r\n\r\n\r\n\r\n\r\n\r\nconst Main = () => (\r\n\r\n<Switch>\r\n<Route exact path=\"/btwgphoneapp2/\" component={Home} />\r\n<Route path =\"/btwgphoneapp2/contacts\" component={Contacts} />\r\n<Route path =\"/btwgphoneapp2/chats\" component={Chats} />\r\n</Switch>\r\n\r\n\r\n)\r\n\r\nexport default Main;","import React from 'react';\nimport Main from './components/main';\nimport { Link } from 'react-router-dom';\nimport {Layout, Navigation, Drawer, Header, Content} from 'react-mdl';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    \n    <div className=\"demo-big-content\">\n    <Layout>\n       <Header className=\"header-color\" title=\"BTWG Phone App\" scroll>\n            <Navigation>\n                <Link className =\"link\" to=\"/btwgphoneapp2/\">Home</Link>\n                <Link className =\"link\" to=\"/btwgphoneapp2/contacts\">Contacts</Link>\n                <Link className =\"link\" to=\"/btwgphoneapp2/chats\">Chats</Link>\n            </Navigation>\n        </Header>\n        <Drawer className=\"menu-drawer\" title=\"BTWG Phone App\">\n            <Navigation>\n                <Link className =\"link\" to=\"/btwgphoneapp2/\">Home</Link>\n                <Link className =\"link\" to=\"/btwgphoneapp2/contacts\">Contacts</Link>\n                <Link className =\"link\" to=\"/btwgphoneapp2/chats\">Chats</Link>\n            </Navigation>\n        </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n            <Main />\n        </Content>\n    </Layout>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/btwglogo.a0c00ef3.png\";"],"sourceRoot":""}